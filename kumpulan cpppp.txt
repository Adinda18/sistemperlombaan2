//list_peserta.cpp

 void createList(List_peserta &L) {
    first(L) = NULL;
    last(L) = NULL;
}

address_peserta alokasi(string name, string id, int angkt) {
    address_peserta P;
    P = new elmlist_peserta;
    info(P).nama = name;
    info(P).nim = id;
    info(P).angkatan = angkt;
    next(P) = NULL;
    prev(P) = NULL;
    return P;
}

void dealokasi(address_peserta &P)
{
    delete P;
};

void insertFirst(List_peserta &L, string name, string id, int angktn) {
    address_peserta P = alokasi(name, id, angktn);
    if ((first(L) == NULL) && (last(L) ==NULL)) {
        first(L) = P;
        last(L) = P;
    } else {
        next(P) = first(L);
        prev(first(L)) = P;
        first(L) = P;
    }
}

void insertLast(List_peserta &L, string name, string id, int angktn){
    address_peserta P = alokasi(name, id, angktn);
    if (first(L)== NULL){
        first(L)=P;
        last(L)=P;
    } else {
        address_peserta q = last(L);
        next(q)=P;
        prev(P)=q;
        last(L)=q;
    }
};
// urut dari angkatan tua
void tambahurut(List_peserta &L, string name, string id, int angktn){
    if ((first(L)==NULL) || (angktn <= info(first(L)).angkatan)){
        insertFirst(L, name, id, angktn);
    } else if (angktn >= info(last(L)).angkatan){
        insertLast(L, name, id, angktn);
    } else{
        address_peserta q = first(L);
        while ((q != NULL) && (angktn > info(next(q)).angkatan)){
            q=next(q);
        }
        address_peserta p = alokasi(name, id, angktn);
        prev(p)=q;
        next(p)=next(q);
        prev(next(p))=p;
        next(q)=p;
    }

};

void printInfo(List_peserta L) {
    address_peserta P = first(L);
    if ((first(L) == NULL) && (last(L)=NULL)) {
        cout << "List Peserta Kosong" << endl;
    } else {
        int i = 0;
        while (P != NULL) {
            i = i + 1;
            cout << "Data Peserta ke-" << i << " : " << endl;
            cout << "Nama : " << info(P).nama <<endl;
            cout << "NIM : " <<info(P).nim <<endl;
            cout << "Angkatan : " << info(P).angkatan <<endl;
            P = next(P);
        }
    }
}

address_peserta findElm(List_peserta L, string id) {
    /**
    * IS : List_parent L mungkin kosong
    * FS : mengembalikan elemen dengan info nim = x.nim,
    * FS : mengembalikan elemen dengan info = x,
           mengembalikan Nil jika tidak ditemukan
    */
    address_peserta P = first(L);
    while ((P != NULL) && (info(P).nim != id)){
        P = next(P);
    }
    if (P !=NULL ){
        return P;
    } else {
        return NULL;
    }
}
void deletePeserta(List_peserta &L,string x,address_peserta &p)
{
    p = findElm(L,x);
    if (p==NULL){
        cout<<"Maaf, peserta dengan nim tersebut tidak ada. "<<endl;
    } else{
        if (p==last(L)){
            last(L)=prev(p);
            next(prev(p))=NULL;
        } else if ((p == last(L)) && (p == first(L))){
            first(L)=NULL;
            last(L)=NULL;
        } else {
            next(prev(p))=next(p);
            prev(next(p))=prev(p);
        }
        next(p) = NULL;
        prev(p) = NULL;
    }
}


//list_lomba.cpp

void createLomba(List_lomba &L){
    first2(L) = NULL;
}

address_lomba allocate(string champ){
    address_lomba P;
    P = new elmlist_lomba;
    info(P) = champ;
    next(P) = NULL;

    return P;
}

void deallocate(address_lomba &P){
    delete P;
}

address_lomba findElem(List_lomba L, string champ){
    if (first2(L) != NULL){
        address_lomba P = first2(L);
        if (info(P) == champ){
            return P;
        } else {
            P = next(P);
            while ((P != first2(L)) && (info(P) != champ)){
                P = next(P);
            }
            if (P != first2(L)){
                return P;
            } else{
                return NULL;
            }
        }
    } else{
        return NULL;
    }
}
void viewLomba(List_lomba L){
    if (first2(L) != NULL){
        address_lomba P = first2(L);
        cout << "Kejuaraan : " << info(P) <<endl;
        P = next(P);
        while (P != first2(L)){
            cout << "Kejuaraan : " << info(P) <<endl;
        }
    }
}

/* insert lomba pakee insert first */
void insertLomba(List_lomba &L, string champ){
    address_lomba P = allocate(champ);
    if(first2(L) == NULL) {
        first2(L) = P;
        next(P) = P;
    } else {
        address_lomba Q = first2(L);
        while(next(Q) != first2(L)) {
            Q = next(Q);
        }
        next(P) = first2(L);
        next(Q) = P;
        first2(L) = P;
    }
}

void deleteFirst(List_lomba &L, address_lomba &P){
    if (first2(L) == NULL){
        P = NULL;
    } else if (next(first2(L)) == first2(L)){
        P = first2(L);
        first2(L) = NULL;
        next(P) = NULL;
    } else {
        address_lomba Q = first2(L);
        while (next(Q) != first2(L)){
            Q = next(Q);
        }
        P = next(Q);
        first2(L) = next(P);
        next(Q) = first2(L);
        next(P) = NULL;
    }
}

void deleteLast(List_lomba &L, address_lomba &P){
    if (first2(L) == NULL){
        P = NULL;
    } else if (next(first2(L)) == first2(L)){
        P = first2(L);
        first2(L) = NULL;
        next(P) = NULL;
    } else {
        address_lomba Q = first2(L);
        while (next(Q) != first2(L)){
            P = Q;
            Q =next(Q);
        }
        next(P) = next(Q);
        next(Q) = NULL;
    }
}

void deleteLomba(List_lomba &L, string champ, address_lomba &P){
    P = findElem(L, champ);
    if (P == NULL){
        cout<< "Maaf, kejuaraan tersebut tidak ada. "<<endl;
    } else{
        if (P == first2(L)){ //bisa jadi dia first sendiri atau ramean, bis jd first pas ramean
            deleteFirst(L, P);
        } else if (next(P) == first2(L)){
            deleteLast(L, P);
        } else {
            address_lomba Q = first2(L);
            while (next(Q) != P){
                Q = next(Q);
            }
            next(Q) = next(P);
            next(P) = NULL;
        }
    }
}


// list_Relasi.cpp

#include "list_relasi.h"

void createRelasi(List_relasi &L3)
{
    first3(L3) = NULL;
}

address_relasi alloRelasi(address_peserta P, address_lomba C)
{
    address_relasi Q = new elmlist_relasi;
    child(Q) = C;
    parent(Q) = P;
    next(Q) = NULL;
    return Q;
}

address_relasi findElmn(List_relasi L3, address_peserta P, address_lomba C)
{
    address_relasi Q = first3(L3);
    while (Q!= NULL)
    {
        if ((parent(Q) == P) && child(Q) == C )
        {
            return Q;
        }
        Q = next(Q);
    }
    return NULL;
}

void insertAkhir(List_relasi &L3, address_relasi P)
{
    address_relasi Q = first3(L3);
    while (next(Q) != NULL)
    {
        Q = next(Q);
    }
    next(Q) = P;
}

void showRelasiParentToChild(List_relasi &L3)
{
    address_relasi P = first3(L3);
    while (P!=NULL)
    {
        cout << info(parent(P)).nama << " mengikuti lomba " << info(child(P))<<endl;
        P= next(P);
    }
}

void showRelasiChildToParent(List_relasi &L3)
{
    address_relasi P = first3(L3);
    while (P!=NULL)
    {
        cout <<info(child(P)) << " diikuti oleh " << info(parent(P)).nama <<endl;
        P= next(P);
    }
}

void PesertaLombaTertentu(List_relasi &L3, string cariLomba)
{
    address_relasi Q = first3(L3);
    int i = 1;
    while (Q !=NULL)
    {
        if (info(child(Q)) == cariLomba)
        {
            cout << "Peserta ke- "<<i<<" : " << info(parent(Q)).nama <<endl;
            i = i+1;
        }
        Q = next(Q);
    }
}

void LombaPesertaTertentu(List_relasi &L3, string namaPeserta)
{
    address_relasi Q = first3(L3);
    int i = 1;
    while (Q != NULL)
    {
        if (info(parent(Q)).nama==namaPeserta)
        {
            cout << "Lomba ke- "<<i<<" : "<< info(child(Q)) << endl;
            i = i+1;
        }
        Q = next(Q);
    }
}
string kejuaraan_popular(List_lomba L2, List_relasi L3){
    if (first2(L2) != NULL){
        address_lomba P = first2(L2);
        address_relasi Q = first3(L3);
        int b = 0;
        while (next(P) != first2(L2)){
            int jum = 0;
            Q = first2(L2);
            while (Q != NULL){
                if (child(Q)== P){
                    jum = jum+1;
                }
                Q = next(Q);
            }
            if (b <jum ){
                b = jum;
            }
            P =next(P);
        }
        if (next(P) == first2(L2)){
            jum = 0;
            Q = first2(L2);
            while (Q != NULL){
                if (child(Q)== P){
                    jum = jum+1;
                }
                Q = next(Q);
            }
            if (b <jum ){
                b = jum;
            }
            P =next(P);
        }
    }
    return info(P);
}

string Peserta_DikitLomba(List_peserta L1, List_relasi L3){
    if (first2(L2) != NULL){
        address_lomba P = first(L1);
        address_relasi Q = first3(L3);
        int b = 9999;
        while (next(P) != first(L1)){
            int jum = 0;
            Q = first(L1);
            while (Q != NULL){
                if (child(Q)== P){
                    jum = jum+1;
                }
                Q = next(Q);
            }
            if (b > jum ){
                b = jum;
            }
            P =next(P);
        }
        if (next(P) == first(L1)){
            jum = 0;
            Q = first(L1);
            while (Q != NULL){
                if (child(Q)== P){
                    jum = jum+1;
                }
                Q = next(Q);
            }
            if (b <jum ){
                b = jum;
            }
            P =next(P);
        }
    }
    return info(P).nama;
}
